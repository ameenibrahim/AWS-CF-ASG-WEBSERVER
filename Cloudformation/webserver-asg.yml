---
AWSTemplateFormatVersion: "2010-09-09"
Description: "EC2 Stack with ELB and S3 Access"

# All parameters are set during stack creation/update
Parameters:
  # Sets the target environment
  BucketName: 
    Description: S3 Bucket Name
    Type: String

  # Sets the target region
  Region:
    Description: Region to launch/update the stack
    Type: String
    AllowedValues:
      - USEAST1
      - EUWEST1
    ConstraintDescription: Invalid region specified

  InstanceCount:
    Description: Number of EC2 instances to launch
    Type: Number
    Default: '1'
  # E.g arn:aws:acm:us-east-1:<account-id>:certificate/<certificate-id>
  SSLCert:
    Type: String
    Description: The SSL key ID from AWS Certificate Management / IAM e.g - arn:aws:acm:us-east-1:<account-id>:certificate/<certificate-id>
    ConstraintDescription: Select fromt the list of Certificates

  NotificationEmailID:
    Description: Email address to notify if there are any scaling operations
    Type: String
    AllowedPattern: >-
      ([a-zA-Z0-9_\-\.]+)@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.)|(([a-zA-Z0-9\-]+\.)+))([a-zA-Z]{2,4}|[0-9]{1,3})(\]?)
    ConstraintDescription: must be a valid email address.

  KeyName:
    Description: The EC2 Key Pair to allow SSH access to the instances
    Type: 'AWS::EC2::KeyPair::KeyName'
    ConstraintDescription: must be the name of an existing EC2 KeyPair.

  VpcId:
    Type: 'AWS::EC2::VPC::Id'
    Description: VpcId of your existing Virtual Private Cloud (VPC)
    ConstraintDescription: Select fromt the list of VPC
    
  Subnets:
    Type: 'List<AWS::EC2::Subnet::Id>'
    Description: The list of SubnetIds in your Virtual Private Cloud (VPC)
    ConstraintDescription: >-
      Atleast two existing subnets associated with at least two different availability zones. 
      They should belong to the selected VPC

  VpnSecGrp:
    Description: Enter the Source Secuirty group of the server from which SSH to the EC2 servers should be allowed. Note that the sec group should be a part of the VPC selected above
    Type: 'AWS::EC2::SecurityGroup::Id'
    ConstraintDescription: Enter a valid sec-grp
  
  IsPrivateSubnetNATed:
    Description: Mention whether the Private subnets selected above are NATed with a NAT Instance or a NAT Gateway
    Type: String
    AllowedValues:
      - NAT-INSTANCE
      - NAT-GATEWAY
    ConstraintDescription: Invalid NAT Option specified

  NATSecGrpID:
    Description: Enter the Source Secuirty group of the NAT server to include the Egress rules (internet access)
    Type: 'AWS::EC2::SecurityGroup::Id'
    ConstraintDescription: Enter a valid  NAT sec-grp
# Mapping to set values based on the incoming parameters
# Organized by region, then by environment

# The name of the Stack will be configured as <environment>-<product>-<region> for e.g PROD-ECOM-US-EAST-API-01 
Conditions:
  # CheckNATGateway: 
  #   Fn::Equals: [ Ref: account, "MAIN" ]
  CheckNATInstanceIngress: !Equals [ Ref: IsPrivateSubnetNATed, "NAT-INSTANCE" ]


Mappings:
  USEAST1:
    DisplayName:
      name: "US-EAST"
    EC2-Params:
      Ec2AMIID: "ami-2d39803a"
      Ec2InstanceType: "t2.micro"
      Ec2InstanceRootVolumeSize: "8"
  EUWEST1:
    DisplayName:
      name: "EU-WEST"
    EC2-Params:
      Ec2AMIID: "ami-02b62c71"
      Ec2InstanceType: "t2.micro"
      Ec2InstanceRootVolumeSize: "8"

# AWS Resource Definitions
Resources:
  ### IAM Roles
  ### A full role is 3 parts: Role, Policy, and Profile
  ### It's reccomended to NOT provide 'RoleName' by AWS Documentation in the ROLE Type
  #

  # API instance Role
  EC2Role:
    Type: "AWS::IAM::Role"
    Properties: 
      AssumeRolePolicyDocument: 
        Version: "2012-10-17"
        Statement: 
          - 
            Effect: "Allow"
            Principal: 
              Service: 
                - "ec2.amazonaws.com"
            Action: 
              - "sts:AssumeRole"
      Path: "/"
  EC2Policy:
    Type: "AWS::IAM::Policy"
    Properties: 
      PolicyName: "S3-Bucket-Access"
      PolicyDocument: 
        Version: "2012-10-17"
        Statement: 
          - 
            Effect: "Allow"
            Action:
              - "s3:GetObject"
              - "s3:ListBucket"
              - "s3:ListAllMyBuckets"
              - "s3:GetObjectAcl"
              - "s3:PutObject"
            Resource: "arn:aws:s3:::aaa-online-docs"
      Roles: 
        - !Ref EC2Role
  EC2Profile:
    Type: "AWS::IAM::InstanceProfile"
    Properties: 
      Path: "/"
      Roles:
        - !Ref EC2Role


  # Security Group for the Web ELB
  StackELBSG:
    Type: "AWS::EC2::SecurityGroup"
    Properties:
      GroupDescription: !Join [ "-", [ !FindInMap [ !Ref Region, DisplayName, name ], "ELB Sec Grp" ] ]
      VpcId: !Ref VpcId
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: '443'
          ToPort: '443'
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: '80'
          ToPort: '80'
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: "Name"
          Value: "ELB-SEC-GRP"

  # ELB for Web Layer
  StackELB: 
    Type: "AWS::ElasticLoadBalancing::LoadBalancer"
    Properties: 
      Listeners:
        - InstancePort: '443'
          LoadBalancerPort: '443'
          Protocol: "HTTPS"
          SSLCertificateId: !Ref SSLCert
        - InstancePort: '80'
          LoadBalancerPort: '80'
          Protocol: "HTTP"
      HealthCheck:
        Target: "TCP:80"
        Timeout:  '5'
        Interval: '10'
        UnhealthyThreshold: '2'
        HealthyThreshold: '3'
      ConnectionSettings:
        IdleTimeout: '60'
      CrossZone: true
      ConnectionDrainingPolicy:
        Enabled: true
        Timeout: 120
      SecurityGroups:
        - !Ref StackELBSG
      Subnets: 
        !Ref Subnets

# Uncomment this to add the static Instance
      # Instances:
      #   - !Ref EC201

      Tags: 
        - Key: "Name"
          Value: "Stack-ELB"


  # Security Group for the Web EC2 Instances
  EC2InstanceSG:
    Type: "AWS::EC2::SecurityGroup"
    Properties:
      GroupDescription: !Join [ "-", [ !FindInMap [ !Ref Region, DisplayName, name ], "EC2 Sec Grp" ] ]
      VpcId: !Ref VpcId
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: '22'
          ToPort: '22'
          SourceSecurityGroupId: !Ref VpnSecGrp
        - IpProtocol: tcp
          FromPort: '443'
          ToPort: '443'
          SourceSecurityGroupId: !Ref StackELBSG
        - IpProtocol: tcp
          FromPort: '80'
          ToPort: '80'
          SourceSecurityGroupId: !Ref StackELBSG
      Tags:
        - Key: "Name"
          Value: !Join [ "-", [ !FindInMap [ !Ref Region, DisplayName, name ], "EC2-SEC-GRP" ] ]

  # NAT Ingress Rules for web instances
  NATSGIngressWeb:
    Condition: CheckNATInstanceIngress
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !Ref NATSecGrpID
      IpProtocol: '-1'
      SourceSecurityGroupId: !Ref EC2InstanceSG

  # API EC2 Instance 01 (If we need a static EC2 instance)
  # EC201:
  #   Type: "AWS::EC2::Instance"
  #   Properties:
  #     KeyName: !Ref KeyName
  #     ImageId: !FindInMap [ !Ref Region, EC2-Params, Ec2AMIID ]
  #     InstanceType: !FindInMap [ !Ref Region, EC2-Params , Ec2InstanceType ]
  #     Monitoring: true
  #     IamInstanceProfile: !Ref EC2Profile
  #     NetworkInterfaces: 
  #       - AssociatePublicIpAddress: true
  #         DeleteOnTermination: true
  #         DeviceIndex: '0'
  #         SubnetId: !Ref privateSubnetIdA
  #         GroupSet: 
  #           - !Ref EC2InstanceSG
  #     Tags:
  #       - Key: "Name"
  #         Value: !Join [ "-", [ !FindInMap [ !Ref Region, DisplayName, name ], "EC2-01" ] ]


# This is for the Optional exerciese (using the Autoscaling group)

  NotificationTopic:
    Type: 'AWS::SNS::Topic'
    Properties:
      Subscription:
        - Endpoint: !Ref NotificationEmailID
          Protocol: email

  Ec2ASGroup:
    Type: 'AWS::AutoScaling::AutoScalingGroup'
    Properties:
      VPCZoneIdentifier: !Ref Subnets
      LaunchConfigurationName: !Ref LaunchConfig
      MinSize: '1'
      MaxSize: '3'
      HealthCheckType: 'ELB'
      HealthCheckGracePeriod: 600
      DesiredCapacity: !Ref InstanceCount
      LoadBalancerNames:
        - !Ref StackELB
      NotificationConfiguration:
          TopicARN: !Ref NotificationTopic
          NotificationTypes:
            - 'autoscaling:EC2_INSTANCE_LAUNCH'
            - 'autoscaling:EC2_INSTANCE_LAUNCH_ERROR'
            - 'autoscaling:EC2_INSTANCE_TERMINATE'
            - 'autoscaling:EC2_INSTANCE_TERMINATE_ERROR'
    CreationPolicy:
      ResourceSignal:
        Timeout: PT15M
    UpdatePolicy:
      AutoScalingRollingUpdate:
        MinInstancesInService: '1'
        MaxBatchSize: '1'
        PauseTime: PT15M
        WaitOnResourceSignals: 'true'


  LaunchConfig:
    Type: 'AWS::AutoScaling::LaunchConfiguration'
    Metadata:
      AWS::CloudFormation::Init:
        configSets:
          default: 
            - config-cfn-hup
            - apache
        apache:
          packages:
            apt: 
              apache2: []
          files:
            /var/www/html/index.html:
              content: '<h1>Welcome to the Web Server example using Cloudformation</h1>'
              mode: '000644'
              owner: root
              group: root
        config-cfn-hup:
          files:
            #cfn-hup configuration 
            '/etc/cfn/cfn-hup.conf':
              content: !Sub |
                [main]
                stack=${AWS::StackId}
                region=${AWS::Region}
                interval=1
            '/etc/cfn/hooks.d/cfn-auto-reloader.conf':
              content: !Sub |
                [cfn-auto-reloader-hook]
                triggers=post.update
                path=Resources.LaunchConfig.Metadata.AWS::CloudFormation::Init
                action=/usr/local/bin/cfn-init -v --stack ${AWS::StackId} --resource LaunchConfig --region ${AWS::Region}
            #systemd service 
            '/etc/init/cfn-hup.conf': 
              content: |
                author "Modria-Ops"
                Description=Cloud formation helper daemon
                version "1.0"
                
                start on started networking
                stop on runlevel [!2345]

                respawn
                respawn limit 10 10

                exec /usr/local/bin/cfn-hup

          services:
            sysvinit:
              apache2:
                enabled: 'true'
                ensureRunning: 'true'
              cfn-hup:
                enabled: 'true'
                ensureRunning: 'true'
                files:
                  - /etc/cfn/cfn-hup.conf
                  - /etc/cfn/hooks.d/cfn-auto-reloader.conf

          commands: 
            enable-cfn-hup:
              command: "initctl reload-configuration" 
            start-cfn-hup:
              command: "initctl start cfn-hup"

    Properties:
      AssociatePublicIpAddress: 'false'
      ImageId: !FindInMap [ !Ref Region, EC2-Params, Ec2AMIID ]
      SecurityGroups:
        - !Ref EC2InstanceSG
      KeyName: !Ref KeyName
      InstanceType: !FindInMap [ !Ref Region, EC2-Params , Ec2InstanceType ]
      UserData:
        Fn::Base64: !Sub |
          #!bin/bash -xe
          apt-get update 
          apt-get -y install python-setuptools
          easy_install https://s3.amazonaws.com/cloudformation-examples/aws-cfn-bootstrap-latest.tar.gz
          /usr/local/bin/cfn-init -v --stack ${AWS::StackId} --resource LaunchConfig --region ${AWS::Region}
          /usr/local/bin/cfn-signal -e $? --stack ${AWS::StackId} --resource Ec2ASGroup --region ${AWS::Region}


  CPUAlarmHigh:
    Type: 'AWS::CloudWatch::Alarm'
    Properties:
      AlarmDescription: Scale-up if CPU > 80% for 10 minutes
      MetricName: CPUUtilization
      Namespace: AWS/EC2
      Statistic: Average
      Period: '300'
      EvaluationPeriods: '2'
      Threshold: '80'
      AlarmActions:
        - !Ref Ec2ScaleUpPolicy
      Dimensions:
        - Name: AutoScalingGroupName
          Value: !Ref Ec2ASGroup
      ComparisonOperator: GreaterThanThreshold


  CPUAlarmLow:
    Type: 'AWS::CloudWatch::Alarm'
    Properties:
      AlarmDescription: Scale-down if CPU < 60% for 10 minutes
      MetricName: CPUUtilization
      Namespace: AWS/EC2
      Statistic: Average
      Period: '300'
      EvaluationPeriods: '2'
      Threshold: '60'
      AlarmActions:
        - !Ref Ec2ScaleDownPolicy
      Dimensions:
        - Name: AutoScalingGroupName
          Value: !Ref Ec2ASGroup
      ComparisonOperator: LessThanThreshold
      
  Ec2ScaleUpPolicy:
    Type: 'AWS::AutoScaling::ScalingPolicy'
    Properties:
      AdjustmentType: ChangeInCapacity
      AutoScalingGroupName: !Ref Ec2ASGroup
      Cooldown: '60'
      ScalingAdjustment: '1'

  Ec2ScaleDownPolicy:
    Type: 'AWS::AutoScaling::ScalingPolicy'
    Properties:
      AdjustmentType: ChangeInCapacity
      AutoScalingGroupName: !Ref Ec2ASGroup
      Cooldown: '60'
      ScalingAdjustment: '-1'


Outputs:
  # EC201IP:
  #   Description: EC201.PrivateIp
  #   Value: !GetAtt EC201.PrivateIp

  ELBDNS:
    Description: StackELB.DNSName
    Value: !GetAtt StackELB.DNSName