# Author: Ameen Ibrahim Raffic
# Version: 1.1
# Description: This cfn template creates a web server auto scaling group with apache2 on linux in one region
#              and IIS in windows in another
---
AWSTemplateFormatVersion: "2010-09-09"
Description: "HA Website on Apache(linux) + IIS(Windows)"

# All parameters are set during stack creation/update
Parameters:

  # Mention a unique S3 bucket name (The region will be same as CFN execution region)
  S3BucketName: 
    Description: S3 Bucket Name
    Type: String
  
  # Sets the target region
  Region:
    Description: Region to launch/update the stack
    Type: String
    AllowedValues:
      - APSOUTHEAST1
    Default: "APSOUTHEAST1"
    ConstraintDescription: Invalid region specified

  InstanceCount:
    Description: Number of EC2 instances to launch
    Type: Number
    Default: '1'
  # E.g arn:aws:acm:us-east-1:<account-id>:certificate/<certificate-id>
  SSLCert:
    Type: String
    Description: The SSL key ID from AWS Certificate Management / IAM e.g - arn:aws:acm:us-east-1:<account-id>:certificate/<certificate-id>
    ConstraintDescription: Select fromt the list of Certificates

  NotificationEmailID:
    Description: Email address to notify if there are any scaling operations
    Type: String
    AllowedPattern: >-
      ([a-zA-Z0-9_\-\.]+)@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.)|(([a-zA-Z0-9\-]+\.)+))([a-zA-Z]{2,4}|[0-9]{1,3})(\]?)
    ConstraintDescription: must be a valid email address.

  KeyName:
    Description: The EC2 Key Pair to allow SSH access to the instances
    Type: 'AWS::EC2::KeyPair::KeyName'
    ConstraintDescription: must be the name of an existing EC2 KeyPair.

  VpcId:
    Type: 'AWS::EC2::VPC::Id'
    Description: VpcId of your existing Virtual Private Cloud (VPC)
    ConstraintDescription: Select fromt the list of VPC

  PrivateSubnets:
    Type: 'List<AWS::EC2::Subnet::Id>'
    Description: The list of Private SubnetIds (NATed) in your Virtual Private Cloud (VPC)
    ConstraintDescription: >-
      Atleast two existing subnets associated with at least two different availability zones. 
      They should belong to the selected VPC

  PublicSubnets:
    Type: 'List<AWS::EC2::Subnet::Id>'
    Description: The list of Public SubnetIds (IGWed) in your Virtual Private Cloud (VPC)
    ConstraintDescription: >-
      Atleast two existing subnets associated with at least two different availability zones. 
      They should belong to the selected VPC

  VpnSecGrp:
    Description: Enter the Source Secuirty group of the server from which SSH to the EC2 servers should be allowed. Note that the sec group should be a part of the VPC selected above
    Type: 'AWS::EC2::SecurityGroup::Id'
    ConstraintDescription: Enter a valid sec-grp

  WebServerLocation:
    Description: Mention whether the the web servers needs to be location in public or private subnets (If private subnet then the administration would be done using a VPN server)
    Type: String
    AllowedValues:
      - PRIVATE-SUBNET
      - PUBLIC-SUBNET
    Default: "PUBLIC-SUBNET"
    ConstraintDescription: Invalid Location Option specified

  LocalIPAddress:
    Description: Enter the local static IP address in CIDR notation (for administration purpose) - SSH (e.g 172.4.4.4/32 )
    Type: String
    


Conditions:
  IsPrivateSubnet: !Equals [ Ref: WebServerLocation, "PRIVATE-SUBNET" ]
  IsPublicSubnet: !Equals [ Ref: WebServerLocation, "PUBLIC-SUBNET" ]

Mappings:
  APSOUTHEAST1:
    DisplayName:
      name: "AP-SOUTHEAST"
    NixEC2Params:
      Ec2AMIID: "ami-49b5282a"
      Ec2InstanceType: "t2.micro"
    WinEC2Params:
      Ec2AMIID: "ami-c922baaa"
      Ec2InstanceType: "t2.micro"

# AWS Resource Definitions
Resources:
  ### IAM Roles
  ### A full role is 3 parts: Role, Policy, and Profile
  ### It's reccomended to NOT provide 'RoleName' by AWS Documentation in the ROLE Type
  #

  # ScreenShotS3Bucket:
  #   Type: AWS::S3::Bucket
  #   Properties:
  #     AccessControl: "PublicRead"
  #     BucketName: !Ref S3BucketName
  #     VersioningConfiguration:
  #       Status: Enabled

  # API instance Role
  EC2Role:
    Type: "AWS::IAM::Role"
    Properties: 
      AssumeRolePolicyDocument: 
        Version: "2012-10-17"
        Statement: 
          - 
            Effect: "Allow"
            Principal: 
              Service: 
                - "ec2.amazonaws.com"
            Action: 
              - "sts:AssumeRole"
      Path: "/"
  EC2Policy:
    Type: "AWS::IAM::Policy"
    Properties: 
      PolicyName: "S3-Bucket-Access"
      PolicyDocument: 
        Version: "2012-10-17"
        Statement: 
          - 
            Effect: "Allow"
            Action:
              - "s3:GetObject"
              - "s3:ListBucket"
              - "s3:ListAllMyBuckets"
              - "s3:GetObjectAcl"
              - "s3:PutObject"
            Resource: "arn:aws:s3:::ameen-github"
      Roles: 
        - !Ref EC2Role
  EC2Profile:
    Type: "AWS::IAM::InstanceProfile"
    Properties: 
      Path: "/"
      Roles:
        - !Ref EC2Role


  # Security Group for the Web ELB
  StackELBSG:
    Type: "AWS::EC2::SecurityGroup"
    Properties:
      GroupDescription: !Join [ "-", [ !FindInMap [ !Ref Region, DisplayName, name ], "ELB Sec Grp" ] ]
      VpcId: !Ref VpcId
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: '443'
          ToPort: '443'
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: '80'
          ToPort: '80'
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: "Name"
          Value: "ELB-SEC-GRP"

  # ELB for Web Layer
  StackELB: 
    Type: "AWS::ElasticLoadBalancing::LoadBalancer"
    Properties: 
      Listeners:
        #- InstancePort: '443'
        #  LoadBalancerPort: '443'
        #  Protocol: "HTTPS"
        #  SSLCertificateId: !Ref SSLCert
        - InstancePort: '80'
          LoadBalancerPort: '80'
          Protocol: "HTTP"
      HealthCheck:
        Target: "TCP:80"
        Timeout:  '5'
        Interval: '10'
        UnhealthyThreshold: '2'
        HealthyThreshold: '3'
      ConnectionSettings:
        IdleTimeout: '60'
      CrossZone: true
      ConnectionDrainingPolicy:
        Enabled: true
        Timeout: 120
      SecurityGroups:
        - !Ref StackELBSG
      Subnets: 
        !Ref PublicSubnets

# Uncomment this to add the static Instance
      # Instances:
      #   - !Ref EC201

      Tags: 
        - Key: "Name"
          Value: "Stack-ELB"


   # Security Group for the Web EC2 Instances (for Private instances)
  PrivateEC2InstanceSG:
    Condition: IsPrivateSubnet
    Type: "AWS::EC2::SecurityGroup"
    Properties:
      GroupDescription: !Join [ "-", [ !FindInMap [ !Ref Region, DisplayName, name ], "EC2 Sec Grp" ] ]
      VpcId: !Ref VpcId
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: '22'
          ToPort: '22'
          SourceSecurityGroupId: !Ref VpnSecGrp
        - IpProtocol: tcp
          FromPort: '3389'
          ToPort: '3389'
          SourceSecurityGroupId: !Ref VpnSecGrp
        - IpProtocol: tcp
          FromPort: '443'
          ToPort: '443'
          SourceSecurityGroupId: !Ref StackELBSG
        - IpProtocol: tcp
          FromPort: '80'
          ToPort: '80'
          SourceSecurityGroupId: !Ref StackELBSG
      Tags:
        - Key: "Name"
          Value: !Join [ "-", [ !FindInMap [ !Ref Region, DisplayName, name ], "EC2-SEC-GRP" ] ]

  PublicEC2InstanceSG:
    Condition: IsPublicSubnet
    Type: "AWS::EC2::SecurityGroup"
    Properties:
      GroupDescription: !Join [ "-", [ !FindInMap [ !Ref Region, DisplayName, name ], "EC2 Sec Grp" ] ]
      VpcId: !Ref VpcId
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: '22'
          ToPort: '22'
          CidrIp: !Ref LocalIPAddress
        - IpProtocol: tcp
          FromPort: '3389'
          ToPort: '3389'
          CidrIp: !Ref LocalIPAddress
        - IpProtocol: tcp
          FromPort: '443'
          ToPort: '443'
          SourceSecurityGroupId: !Ref StackELBSG
        - IpProtocol: tcp
          FromPort: '80'
          ToPort: '80'
          SourceSecurityGroupId: !Ref StackELBSG
      Tags:
        - Key: "Name"
          Value: !Join [ "-", [ !FindInMap [ !Ref Region, DisplayName, name ], "EC2-SEC-GRP" ] ]

  # # NAT Ingress Rules for web instances (uncomment only if NAT gateway not created with Private subnets)
  # NATSGIngressWeb:
  #   Condition: CheckNATInstanceIngress
  #   Type: AWS::EC2::SecurityGroupIngress
  #   Properties:
  #     GroupId: !Ref NATSecGrpID
  #     IpProtocol: '-1'
  #     SourceSecurityGroupId: !Ref EC2InstanceSG

  # API EC2 Instance 01 (If we need a static EC2 instance)
  # EC201:
  #   Type: "AWS::EC2::Instance"
  #   Properties:
  #     KeyName: !Ref KeyName
  #     ImageId: !FindInMap [ !Ref Region, EC2-Params, Ec2AMIID ]
  #     InstanceType: !FindInMap [ !Ref Region, EC2-Params , Ec2InstanceType ]
  #     Monitoring: true
  #     IamInstanceProfile: !Ref EC2Profile
  #     NetworkInterfaces: 
  #       - AssociatePublicIpAddress: true
  #         DeleteOnTermination: true
  #         DeviceIndex: '0'
  #         SubnetId: !Ref privateSubnetIdA
  #         GroupSet: 
  #           - !Ref EC2InstanceSG
  #     Tags:
  #       - Key: "Name"
  #         Value: !Join [ "-", [ !FindInMap [ !Ref Region, DisplayName, name ], "EC2-01" ] ]


# This is for the Optional exerciese (using the Autoscaling group)

  NotificationTopic:
    Type: 'AWS::SNS::Topic'
    Properties:
      Subscription:
        - Endpoint: !Ref NotificationEmailID
          Protocol: email

  NixEc2ASGroup:
    Type: 'AWS::AutoScaling::AutoScalingGroup'
    Properties:
      VPCZoneIdentifier: !Ref PublicSubnets
      LaunchConfigurationName: !Ref NixLaunchConfig
      MinSize: '1'
      MaxSize: '2'
      HealthCheckType: 'ELB'
      HealthCheckGracePeriod: 180
      DesiredCapacity: !Ref InstanceCount
      LoadBalancerNames:
        - !Ref StackELB
      NotificationConfiguration:
          TopicARN: !Ref NotificationTopic
          NotificationTypes:
            - 'autoscaling:EC2_INSTANCE_LAUNCH'
            - 'autoscaling:EC2_INSTANCE_LAUNCH_ERROR'
            - 'autoscaling:EC2_INSTANCE_TERMINATE'
            - 'autoscaling:EC2_INSTANCE_TERMINATE_ERROR'
    CreationPolicy:
      ResourceSignal:
        Timeout: PT60M
    UpdatePolicy:
      AutoScalingRollingUpdate:
        MinInstancesInService: '1'
        MaxBatchSize: '1'
        PauseTime: PT60M
        WaitOnResourceSignals: 'true'

  NixLaunchConfig:
    Type: 'AWS::AutoScaling::LaunchConfiguration'
    Metadata:
      AWS::CloudFormation::Init:
        configSets:
          default:
            - config-cfn-hup
            - mountEBS
            - installPackages
            - configureApache2
            - configureGIT
            - deployCode
        mountEBS:
          commands:
            1checkMakeFSCommand:
              command: 'sudo file -s /dev/xvdf | grep -v "filesystem" | grep "data" > /dev/null && sudo mkfs -t ext4 /dev/xvdf'
            2createMountDir:
              command: 'sudo mkdir -p /webMnt'
            3mountEBSCommand:
              command: 'sudo mount /dev/xvdf /webMnt'
            4backupFSTab:
              command: 'sudo cp /etc/fstab /etc/fstab.orig'
            5updateFSTab:
              command: 'echo "/dev/xvdf /webMnt   ext4    defaults,nofail        0       2" | sudo tee --append /etc/fstab > /dev/null' 

        installPackages:
          commands:
            updateApt:
              command: 'sudo apt-get update'
          packages:
            apt:
              apache2: []
              git: []

        configureApache2:
          files:
            '/etc/apache2/sites-available/solution-arch.com.conf':
              content: !Sub |
                <VirtualHost *:80>
                  ServerAdmin ameen@solution-arch.com
                  ServerName solution-arch.com
                  ServerAlias www.solution-arch.com
                  DocumentRoot /webMnt/www/html
                  DirectoryIndex index.php index.html index.htm
                  <Directory /webMnt/www/html>
                        Options Indexes FollowSymLinks MultiViews
                        AllowOverride all
                        Require all granted
                  </Directory>
                  ErrorLog ${!APACHE_LOG_DIR}/error.log
                  CustomLog ${!APACHE_LOG_DIR}/access.log combined
                </VirtualHost>
          commands:
            enableSites:
              command: 'sudo a2ensite solution-arch.com.conf'
            disableSites:
              command: 'sudo a2dissite 000-default.conf'
        configureGIT:
          files:
            '/home/ubuntu/.ssh/git_id_rsa':
              content: !Sub |
                -----BEGIN RSA PRIVATE KEY-----
                MIICXQIBAAKBgQCipYkEbU9W1VR/ZkA0ezLSv2aL5c81jA6FjidTI9TgYHgG0a3G
                GwEZs7fjbJx24SxrjIfB39FOXGeVj5yXKqOpdsq3GtTDEJv3hIvXYRl88OSwZOsa
                B1lH8BL7P4E0j+jIp40+uQENd6DSaCNkvF01qrOTaENtrqoVOuBrpGx0UwIDAQAB
                AoGAQWRGc1YzeNjqURJeK/uAUoULiKGLrp6x0/Z0TxPv6Yo/l5ZDxItk5N2ByFkJ
                iy46+r6Uclk3QMccCmCj9474H20DJU8c3rccPvV+xSu4vi9G6ntTMd1Gr25xrUpC
                K9SCh2PK1vVc/8DkwsReMXyivV486ffrbmgM/lmdIjuDm2kCQQDNIzQxD22+tLL+
                taI7s0AyK/TnRW8edyRacltU/1Kx3j445a57dbnt+oN3nwh40ddn9mKN/A0/q2/c
                xlvsiXudAkEAyvlJHxbNKexqlPUCfkAphu7QAhNnsQ+kAYAPYqXPa5YWwOff1Guc
                7nIIAO/gTWnUVhcMuLAIDfWxofYnTUSErwJBAI6UTF9ZGO83Cz4sIpGaGiGFGdhx
                EzW6m6Ld3wsp12FXVioXwfl/rvZwa1YGTE4lk7Fnt8J2EQNS9hIeMKAsQqUCQG5D
                /PBRv8U9tS0U6XTSwHyYMhJenl83Qv65piION9+XmubTUOqiR4/WDPkNV4pWqs7W
                GMgggU+sIQL+qZ01UusCQQCoZsYaGHYsZfsA09hp/4yLlYOQBZhejM0m2dBsqTnQ
                tijWfAsJh5gDgQmzOZBE0SsHKQu0pS5mSBu0Y4S9xYRj
                -----END RSA PRIVATE KEY-----
              mode: '000400'
              owner: ubuntu
              group: ubuntu
          commands:
            1addSSHKeyUbuntu:
              command: 'ssh-keyscan github.com >> /home/ubuntu/.ssh/known_hosts'
            2addSSHKey:
              command: 'ssh-keyscan github.com >> /root/.ssh/known_hosts'
        deployCode:
          commands:
            1pullCode:
              command: 'eval $(ssh-agent -s) && ssh-add /home/ubuntu/.ssh/git_id_rsa && git clone git@github.com:ameenibrahim/static-site.git'
              cwd : "/home/ubuntu/"
            2makeDeployDir:
              command: 'sudo mkdir -p /webMnt/www/html'
            3copyCode:
              command: 'sudo cp -r /home/ubuntu/static-site/html/* /webMnt/www/html/'
              cwd : "~"
            4editIndex:
              command: 'sudo find /webMnt/www/html/ -type f -name "*.html" -exec sed -i "s/<Server_Type>/linux/g" {} \;'
              cwd: "/webMnt/www/html/"
            5changePerm:
              command: 'sudo chmod -R 755 /webMnt/www'
            6restartApache:
              command: 'sudo service apache2 restart'

        config-cfn-hup:
          files:
            #cfn-hup configuration 
            '/etc/cfn/cfn-hup.conf':
              content: !Sub |
                [main]
                stack=${AWS::StackId}
                region=${AWS::Region}
                interval=1
            '/etc/cfn/hooks.d/cfn-auto-reloader.conf':
              content: !Sub |
                [cfn-auto-reloader-hook]
                triggers=post.update
                path=Resources.NixLaunchConfig.Metadata.AWS::CloudFormation::Init
                action=/usr/local/bin/cfn-init -v --stack ${AWS::StackId} --resource NixLaunchConfig --region ${AWS::Region}
            #Upstart service 
            '/etc/init/cfn-hup.conf': 
              content: !Sub |
                author "Ameen-DevOps"
                description "Cloud formation helper daemon"
                version "1.0"
                
                start on started networking
                stop on runlevel [!2345]

                respawn
                respawn limit 10 10

                exec /usr/local/bin/cfn-hup
          # services:
          #   sysvinit:
          #     apache2:
          #       enabled: 'true'
          #       ensureRunning: 'true'
          #     cfn-hup:
          #       enabled: 'true'
          #       ensureRunning: 'true'
          #       files:
          #         - /etc/cfn/cfn-hup.conf
          #         - /etc/cfn/hooks.d/cfn-auto-reloader.conf
          commands: 
            enable-cfn-hup:
              command: "sudo initctl reload-configuration" 
            start-cfn-hup:
              command: "initctl status cfn-hup | grep 'stop' > /dev/null && sudo initctl start cfn-hup"

    Properties:
      AssociatePublicIpAddress: 'true'
      BlockDeviceMappings:
        - DeviceName: "/dev/sdf"
          Ebs:
            DeleteOnTermination: true
            VolumeSize: '1'
            VolumeType: 'gp2'
      ImageId: !FindInMap [ !Ref Region, NixEC2Params, Ec2AMIID ]
      SecurityGroups:
        - !Ref PublicEC2InstanceSG
      KeyName: !Ref KeyName
      InstanceType: !FindInMap [ !Ref Region, NixEC2Params , Ec2InstanceType ]
      UserData:
        Fn::Base64: !Sub |
          #!bin/bash -xe
          apt-get update 
          apt-get -y install python-setuptools
          easy_install https://s3.amazonaws.com/cloudformation-examples/aws-cfn-bootstrap-latest.tar.gz
          /usr/local/bin/cfn-init -v --stack ${AWS::StackId} --resource NixLaunchConfig --region ${AWS::Region}
          /usr/local/bin/cfn-signal -e $? --stack ${AWS::StackId} --resource NixEc2ASGroup --region ${AWS::Region}


  CPUAlarmHigh:
    Type: 'AWS::CloudWatch::Alarm'
    Properties:
      AlarmDescription: Scale-up if CPU > 80% for 10 minutes
      MetricName: CPUUtilization
      Namespace: AWS/EC2
      Statistic: Average
      Period: '300'
      EvaluationPeriods: '2'
      Threshold: '80'
      AlarmActions:
        - !Ref Ec2ScaleUpPolicy
      Dimensions:
        - Name: AutoScalingGroupName
          Value: !Ref NixEc2ASGroup
      ComparisonOperator: GreaterThanThreshold


  CPUAlarmLow:
    Type: 'AWS::CloudWatch::Alarm'
    Properties:
      AlarmDescription: Scale-down if CPU < 60% for 10 minutes
      MetricName: CPUUtilization
      Namespace: AWS/EC2
      Statistic: Average
      Period: '300'
      EvaluationPeriods: '2'
      Threshold: '60'
      AlarmActions:
        - !Ref Ec2ScaleDownPolicy
      Dimensions:
        - Name: AutoScalingGroupName
          Value: !Ref NixEc2ASGroup
      ComparisonOperator: LessThanThreshold
      
  Ec2ScaleUpPolicy:
    Type: 'AWS::AutoScaling::ScalingPolicy'
    Properties:
      AdjustmentType: ChangeInCapacity
      AutoScalingGroupName: !Ref NixEc2ASGroup
      Cooldown: '60'
      ScalingAdjustment: '1'

  Ec2ScaleDownPolicy:
    Type: 'AWS::AutoScaling::ScalingPolicy'
    Properties:
      AdjustmentType: ChangeInCapacity
      AutoScalingGroupName: !Ref NixEc2ASGroup
      Cooldown: '60'
      ScalingAdjustment: '-1'


Outputs:
  # EC201IP:
  #   Description: EC201.PrivateIp
  #   Value: !GetAtt EC201.PrivateIp

  ELBDNS:
    Description: StackELB.DNSName
    Value: !GetAtt StackELB.DNSName